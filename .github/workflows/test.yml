# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: üõ†Ô∏è Test Python üêç package 

on:
  # It is not really avoidable to run the tests twice on the commit.
  # if i want to make sure that only repos that have passed the test are
  # deployed.
  # no more testing on push from dev, because I'm not going to push to a main or dev without
  # an active PR
  pull_request:

env:
  # How to get the name of the branch (see: https://stackoverflow.com/a/71158878)
  branch_name: ${{ github.head_ref || github.ref_name }} 
  COMMIT_MSG: ${{ github.event.head_commit.message }}
  skip: "false"

jobs:
  print-context:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Print Environment Variables
        # see more contexts: https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
        run: |
          echo "Branch name ${{ env.branch_name }}"
          echo "GitHub actor: ${{ github.actor }}"
          echo "GitHub workflow: ${{ github.workflow }}"
          echo "GitHub action: ${{ github.action }}"
          echo "GitHub run_ID: ${{ github.run_id }}"
          echo "GitHub event_name: ${{ github.event_name }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "Github head_ref ${{ github.head_ref }}"
          echo "GitHub ref_type: ${{ github.ref_type }}"
          echo "GitHub ref_name: ${{ github.ref_name }}"
          commit=$(git rev-parse HEAD)
          echo "Commit ID of HEAD: ${commit}"
          msg=$(git log -1 --pretty=format:"%s")
          echo "Last Commit message: ${msg}"
          branch=$(git branch -r --contains $commit --format "%(refname:lstrip=3)")
          echo "scripted branch: ${branch}"
          echo "GitHub base branch of tag: ${{ github.event.base_ref }}"
          echo "GitHub sha: ${{ github.sha }}"
          echo "GitHub message: ${{ github.event.head_commit.message }}"
  
  determine_skip:
    name: Check for bumpver message
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check if commit message contains "bump version"
      id: check_commit
      run: |
        msg=$(git log -1 --pretty=format:"%s")
        echo "Commit message ${msg}"
        if [[ "${msg}" =~ ^bump\ version\ [0-9]+\.[0-9]+\.[0-9]+[a-zA-Z]?[0-9]+\ -\>\ [0-9]+\.[0-9]+\.[0-9]+?[a-zA-Z]?[0-9]+$ ]]; then
          echo "skip=true" >> $GITHUB_ENV
        fi


  test:
    name: üß™ Unit testing
    if: ${{ github.env.skip != 'true' }}

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # caching pip dependencies

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        pip install -e .

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest

    - name: Save test results
      run: |
        mkdir -p test_results/ 
        # locally store a file of test results for each test in the matrix
        echo "TEST:OK" > test_results/${{ matrix.python-version }}.txt
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: test_results/*.txt
        
  upload-test-results:
    # creates one artifact 'test-results' for the entire test matrix with all files
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        if: env.skip != 'true'
      - uses: actions/download-artifact@v4
        if: env.skip != 'true'
        with:
          pattern: test-results-*
          path: test_results/
          merge-multiple: true
      - name: Upload artifact
        if: env.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results/*.txt


  integration-test:
    name: üõ†Ô∏è Test Jupyter Notebooks
    needs: test

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # caching pip dependencies

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nbconvert
        pip install -e .[dev]

    - name: Test notebooks
      run: | 
        jupyter nbconvert --to markdown --execute scripts/*.ipynb

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: converted-notebooks-${{ matrix.python-version }}
        path: scripts/*.md
        