[case-study]
package = ..
name = tktd_rna_pulse
scenario = rna_pulse_5_substance_specific_full_dataset
observations = tox.db
simulation = SingleSubstanceSim3

[simulation]
# model specification
# --------------------
y0 = cext=cext cint=Array([0]) nrf2=Array([1]) P=Array([0]) H=Array([0])
model = tktd_rna_5
modeltype = deterministic
solver = JaxSolver
solver_post_processing = survival
seed = 3
prior_dimensions = substance
substance = diuron diclofenac naproxen
batch_dimension = id
x_dimension = time

# data selection
# --------------------
apical_effect = lethal
hpf = 24

[data-structure]
cext = dimensions=[id,time] min=0 max=nan observed=False
cint = dimensions=[id,time] min=0 max=nan observed=True
nrf2 = dimensions=[id,time] min=0 max=nan observed=True
P = dimensions=[id,time] min=0 max=nan observed=False
H = dimensions=['id','time'] min=nan max=nan observed=False
survival = dimensions=[id,time] min=0 max=1 observed=True
lethality = dimensions=['id','time'] min=0.0 max=18.0 observed=False

[model-parameters]
# IN THIS SCNEARIO PRIORS ARE DEFINED IN THE USER_DEFINED_PROBABILITY_MODEL
# prob.model_rna_pulse_3_nb_independent
k_i_substance = value=[5.0,0.5,0.5] dims=['substance'] prior=lognorm(scale=[1.0,1.0,1.0],s=2) hyper=True free=True
k_i = value=0.5 dims=['id'] prior=deterministic(value=k_i_substance[substance_index]) hyper=False free=True

# RNA model parameters
# RNA transcription rate
r_rt_substance = value=[0.1,0.1,0.1] prior=lognorm(scale=[1.0,1.0,1.0],s=2) dims=["substance"] hyper=True free=True
r_rt = value=0.1 dims=['id'] prior=deterministic(value=r_rt_substance[substance_index]) hyper=False free=True

# RNA decay
r_rd_substance = value=[0.5,0.5,0.5] prior=lognorm(scale=[0.5,0.5,0.5],s=2) dims=["substance"] hyper=True free=True
r_rd = value=0.5 dims=['id'] prior=deterministic(value=r_rd_substance[substance_index]) hyper=False free=True

# responsiveness of activation
v_rt_substance = value=[1.0,1.0,1.0] prior=lognorm(scale=[1.0,1.0,1.0],s=2) dims=["substance"] hyper=True free=True
v_rt = value=1.0 dims=['id'] prior=deterministic(value=v_rt_substance[substance_index]) hyper=False free=True

# Concentratrion threshold for gene activation
z_ci_substance = value=[1.0,1.0,1.0] prior=lognorm(scale=[0.5,0.5,0.5],s=2) dims=["substance"] hyper=True free=True
z_ci = value=1.0 dims=['id'] prior=deterministic(value=z_ci_substance[substance_index]) hyper=False free=True

# RNA decay
k_p_substance = value=[0.1,0.02,0.02] prior=lognorm(scale=[0.02,0.02,0.02],s=2) dims=["substance"] hyper=True free=True
k_p = value=0.05 dims=['id'] prior=deterministic(value=k_p_substance[substance_index]) hyper=False free=True

# Metabolization
k_m_substance = value=[0.01,0.01,0.01] prior=lognorm(scale=[0.05,0.05,0.05],s=2) dims=["substance"] hyper=True free=True
k_m = value=0.01 dims=['id'] prior=deterministic(value=k_m_substance[substance_index]) hyper=False free=True

# SD parameters
h_b_substance = value=[0.0000001,0.0000001,0.0000001] prior=lognorm(scale=[1e-08,1e-08,1e-08],s=2) dims=["substance"] hyper=True free=True
h_b = value=1e-07 dims=['id'] prior=deterministic(value=h_b_substance[substance_index]) hyper=False free=True

z_substance = value=[1,1,1] prior=lognorm(scale=[1,1,1],s=1) dims=["substance"] hyper=True free=True
z = value=1.0 dims=['id'] prior=deterministic(value=z_substance[substance_index]) hyper=False free=True

kk_substance = value=[0.02,0.02,0.02] prior=lognorm(scale=[0.02,0.02,0.02],s=3) dims=["substance"] hyper=True free=True
kk = value=0.02 dims=['id'] prior=deterministic(value=kk_substance[substance_index]) hyper=False free=True

# this is the same noise for all substances. Under the current model specification
# it can't be modeled any other way. Another assumption would be weird anyways
sigma_cint = value=0.5 prior=halfnorm(scale=5.0) dims=[]
sigma_nrf2 = value=0.1 prior=halfnorm(scale=5.0) dims=[]

# fixed model parameters
ci_max_substance = value=[1757.0,168.1,6364.8] prior=deterministic(value=[1757.0,168.1,6364.8]) free=False dims=["substance"] hyper=False free=True
ci_max = value=1000.0 dims=['id'] prior=deterministic(value=ci_max_substance[substance_index]) hyper=False free=True

r_0 = value=1.0 free=False

[error-model]
cint = normal(loc=0,scale=sigma_cint,obs=jnp.log(obs/(cint+1e-8)),obs_inv=jnp.exp(res)*cint)
nrf2 = normal(loc=0,scale=sigma_nrf2,obs=jnp.log(obs/(nrf2+1e-8)),obs_inv=jnp.exp(res)*nrf2)
survival = binom(p=survival,n=nzfe)

[multiprocessing]
cores = 1

[inference]
backend = numpyro
extra_vars = nzfe substance_index survivors_before_t
EPS=1e-8
objective_function = objective_average
n_objectives = 1
n_predictions = 1000
plot_function = pyabc_posterior_predictions

[inference.pyabc]
population_size = 100
minimum_epsilon = 0.00001
min_eps_diff = 0.0000001
max_nr_populations = 100
sampler = SingleCoreSampler
database_path = pyabc.db
eval.model_id = 0
eval.history_id = -1
eval.n_predictions = 1000
plot_function = pyabc_posterior_predictions

[inference.pyabc.redis]
port = 1803
password = simulate

[inference.pymoo]
population_size = 1000
max_nr_populations = 100
algorithm = UNSGA3
ftol = 0.01
xtol = 0.001
verbose = True

[inference.numpyro]
user_defined_error_model = conditional_survival_hazard_error_model
gaussian_base_distribution = True
init_strategy = init_to_sample
kernel = svi
# With 'svi' or 'map' the model should run with roundabout 20-30 iterations per second. 
# In the init phase this can be around 10 iterations. Slower model evaluations indicate
# that the model is not converging correctly and is perhaps stuck on a local optimum
svi_iterations = 10000
svi_learning_rate = 0.005
chains = 1
draws = 1000


[solverbase]
x_dim = time
exclude_kwargs_model = t time x_in y x Y X
exclude_kwargs_postprocessing = t time interpolation results

[jax-solver]
x_dim = time
diffrax_solver = Dopri5
rtol = 0.001
atol = 1e-06
pcoeff = 0.2
icoeff = 0.4
dcoeff = 0.0
max_steps = 100000
throw_exception = False

